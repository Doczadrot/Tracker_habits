name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DATABASE_NAME=test_db" >> $GITHUB_ENV
        echo "DATABASE_USER=test_user" >> $GITHUB_ENV
        echo "DATABASE_PASSWORD=test_password" >> $GITHUB_ENV
        echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
        echo "DATABASE_PORT=5432" >> $GITHUB_ENV
        echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "TELEGRAM_BOT_TOKEN=test-token" >> $GITHUB_ENV

    - name: Run migrations
      run: |
        python manage.py migrate

    - name: Run tests
      run: |
        python manage.py test
        # pytest --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort

    - name: Run Black
      run: black --check .

    - name: Run isort
      run: isort --check-only .

    - name: Run flake8
      run: flake8 .

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t habits-api:${{ github.sha }} .

    - name: Test Docker image
      run: |
        docker run --rm habits-api:${{ github.sha }} python manage.py check

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /opt/habits-api
          git pull origin main
          docker-compose down
          docker-compose build
          docker-compose up -d
          docker-compose exec -T web python manage.py migrate
          docker-compose exec -T web python manage.py collectstatic --noinput
